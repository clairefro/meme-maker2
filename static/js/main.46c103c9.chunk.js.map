{"version":3,"sources":["components/memeThumb.js","components/memeImageList.js","components/memeSVG.js","components/memeEditor.js","App.js","serviceWorker.js","index.js"],"names":["MemeThumb","id","title","url","width","height","selectBase","props","className","style","backgroundImage","onClick","MemeImageList","useState","memeImages","setMemeImages","useEffect","fetch","then","res","json","data","memes","length","map","m","key","name","MemeSVG","textTop","textBottom","fontSizeTop","fontSizeBottom","theme","aspectRatio","x","y","positionTop","setPositionTop","positionBottom","setPositionBottom","refSVG","useRef","trackTop","e","offsetX","offsetY","trackBottom","options","backgroundColor","textStyles","textTransform","fontFamily","fontWeight","handleMouseDown","pos","target","addEventListener","removeEventListener","saveSvgAsPng","current","ref","xlinkHref","onMouseDown","fontSize","MemeEditor","setTextTop","setTextBottom","fontsizeTop","setFontsizeTop","fontsizeBottom","setFontsizeBottom","fill","stroke","setTheme","htmlFor","type","onChange","value","min","max","Object","keys","App","selectedBase","setSelectedBase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46c103c9.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\nconst MemeThumb = ({ id, title, url, width, height, selectBase }) => {\n  const props = {id, title, url, width, height}\n\n  return (\n    <div className=\"meme-thumb\" style={{backgroundImage: `url(${url})`}} onClick={()=>selectBase(props)} >\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default MemeThumb;\n","import React, { useState, useEffect } from 'react';\n\nimport MemeThumb from './memeThumb'\nconst MemeImageList = ({ selectBase }) => {\n  const [memeImages, setMemeImages] = useState([])\n\n  useEffect(()=> {\n    fetch('https://api.imgflip.com/get_memes')\n    .then(res => res.json())\n    .then(data => setMemeImages(data.data.memes))\n  },[])\n\n  return (\n    <div className=\"meme-image-list\">\n      <div className=\"meme-thumb-list\">\n        { memeImages.length>0 ? memeImages.map(m => (\n          <MemeThumb\n            key={m.id}\n            id={m.id}\n            title={m.name}\n            url={m.url}\n            width={m.width}\n            height={m.height}\n            selectBase={selectBase}\n          />\n        )) : <p>Loading meme bases...</p>\n        }\n      </div>\n\n    </div>\n  )\n}\n\n\nexport default MemeImageList;\n","import React, {useState, useRef} from 'react';\nimport {saveSvgAsPng} from 'save-svg-as-png';\n\nconst MemeSVG = ({ data, textTop, textBottom, fontSizeTop, fontSizeBottom, theme }) => {\n  const aspectRatio = data.width/data.height;\n  const [positionTop, setPositionTop] = useState({x: 100, y :200})\n  const [positionBottom, setPositionBottom] = useState({x: 100, y :400})\n  const refSVG = useRef()\n\n  const trackTop = (e) => {\n    setPositionTop({ x: e.offsetX -50, y: e.offsetY + 10 })\n  }\n  const trackBottom = (e) => {\n    setPositionBottom({ x: e.offsetX -50, y: e.offsetY + 10 })\n  }\n\n  // for dl\n  const options = {\n    backgroundColor: '#fff',\n  }\n\n  const textStyles = {\n    textTransform: 'uppercase',\n    fontFamily: 'sans-serif',\n    fontWeight: 'bold'\n  }\n\n  const handleMouseDown = (e, pos) => {\n    if(pos === 'top') {\n      e.target.addEventListener('mousemove', trackTop)\n      e.target.addEventListener('mouseup', (e) => {\n        e.target.removeEventListener('mousemove',trackTop)\n      })\n    }\n    else if (pos === 'bottom') {\n      e.target.addEventListener('mousemove', trackBottom)\n      e.target.addEventListener('mouseup', (e) => {\n        e.target.removeEventListener('mousemove',trackBottom)\n      })\n    }\n  }\n\n  return (\n    <>\n    <button onClick={()=>saveSvgAsPng(refSVG.current, \"meme.png\", options)}>Download Meme!</button>\n    <br/>\n      <svg\n      ref={refSVG}\n      width={700}\n      height={700}\n      >\n        <image xlinkHref={data.url} width={700} height={700*aspectRatio} />\n        <text x={positionTop.x} y={positionTop.y} onMouseDown={e => handleMouseDown(e, 'top')} style={{fontSize: `${fontSizeTop}px`, ...textStyles, ...theme }} > {textTop} </text>\n        <text x={positionBottom.x} y={positionBottom.y} onMouseDown={e => handleMouseDown(e, 'bottom')} style={{fontSize: `${fontSizeBottom}px`, ...textStyles, ...theme}}> {textBottom} </text>\n      </svg>\n    </>\n\n  )\n}\n\nexport default MemeSVG;\n\n// <div className=\"meme-image()\" style={{backgroundImage: `url(${url})`}}>\n// </div>\n","import React, {useEffect, useState} from 'react';\n\nimport MemeSVG from './memeSVG';\n\nconst MemeEditor = ({ data }) => {\n  const [textTop, setTextTop] = useState(\"\")\n  const [textBottom, setTextBottom] = useState(\"\")\n  const [fontsizeTop, setFontsizeTop] = useState(48)\n  const [fontsizeBottom, setFontsizeBottom] = useState(48)\n  const [theme, setTheme] =useState({ fill: '#fff', stroke: '#000'})\n  const { title, url, width, height, id } = data;\n\n  const clearText = () => {\n    setTextTop(\"\")\n    setTextBottom(\"\")\n  }\n\n  const handleTheme = (e) => {\n    if (e.target.value === 'white') {\n      setTheme({fill: '#fff', stroke: '#000'})\n    }\n    else if (e.target.value === 'black') {\n      setTheme({fill: '#000', stroke: '#fff'})\n    }\n  }\n\n  return (\n    <div className=\"meme-editor\">\n      <h2>EDIT MEME</h2>\n      <p>{title}</p>\n      <div className=\"meme-editor-sections\">\n        <div className=\"text-edit\">\n          <div className=\"text-top\">\n            <label htmlFor=\"top-text\">Text #1 </label>\n            <input type=\"text\" name=\"top-text\" onChange={(e)=>(setTextTop(e.target.value))}/>\n            <label htmlFor=\"fontsize-slider\">Font size </label>\n            <input type=\"range\" min=\"8\" max=\"90\" value=\"48\" name=\"fontsize-slider\" id=\"fontsize-slider\" onChange={(e)=>(setFontsizeTop(e.target.value))} />\n          </div>\n\n\n          <div className=\"text-bottom\">\n            <label htmlFor=\"bottom-text\">Text#2 </label>\n            <input type=\"text\" name=\"top-text\" onChange={(e)=>(setTextBottom(e.target.value))}/>\n            <label htmlFor=\"fontsize-slider-bottom\">Font size </label>\n            <input type=\"range\" min=\"8\" max=\"90\" value=\"48\" name=\"fontsize-slider-bottom\" id=\"fontsize-slider-bottom\" onChange={(e)=>(setFontsizeBottom(e.target.value))} />\n          </div>\n\n          <div className=\"theme-select\">\n            <select name=\"theme-select\" id=\"theme-select\" onChange={handleTheme}>\n              <option value=\"white\">white text</option>\n              <option value=\"black\">black text</option>\n            </select>\n          </div>\n        <p>drag and drop text to desired position</p>\n         </div>\n\n        <button onClick={clearText} style={{width: \"100px\"}}>Clear text</button>\n        <div className=\"meme-window\">\n        { Object.keys(data).length === 0 ?\n          <p>{\"<---\"} Click a base meme to start</p>\n          :\n          <MemeSVG data={data} textTop={textTop} textBottom={textBottom} fontSizeTop={fontsizeTop} fontSizeBottom={fontsizeBottom} theme={theme}/>\n        }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MemeEditor;\n","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './style/App.scss';\n\nimport MemeImageList from './components/memeImageList'\nimport MemeEditor from './components/memeEditor'\n\nfunction App() {\n  const [selectedBase, setSelectedBase] =useState({})\n\n  const selectBase = (data) => {\n    setSelectedBase(data)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>BUILD-A-MEME</h1>\n      <div className=\"panels\">\n        <div className=\"panel-left\">\n          <h2>CHOOSE A BASE</h2>\n          <MemeImageList selectBase={selectBase}/>\n        </div>\n        <div className=\"panel-right\">\n          <MemeEditor data={selectedBase}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}